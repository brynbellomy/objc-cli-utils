// Generated by CoffeeScript 1.3.3
(function() {
  var documentationCommentFor, file, processFile,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  file = "";

  process.stdin.on("data", function(chunk) {
    return file += chunk.toString();
  });

  process.stdin.on("end", function() {
    return processFile(file);
  });

  process.stdin.resume();

  process.stdin.setEncoding("utf8");

  processFile = function(code) {
    var i, j, line, lines, methodDeclaration, processed, processedLine, _i, _len, _ref;
    lines = code.split("\n");
    processed = [];
    for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
      line = lines[i];
      processedLine = line;
      if ((_ref = processedLine.charAt(0)) === "+" || _ref === "-") {
        methodDeclaration = [processedLine];
        if (__indexOf.call(processedLine, "{") < 0) {
          j = 0;
          while (lines[i + (++j)].indexOf("{") === -1) {
            methodDeclaration.push(lines[i + j]);
          }
          if (lines[i + j].indexOf("{") !== -1) {
            methodDeclaration.push(lines[i + j].slice(0, lines[i + j].indexOf("{")));
          }
        }
        methodDeclaration = methodDeclaration.join(" ");
        methodDeclaration = methodDeclaration.slice(0, methodDeclaration.indexOf("{"));
        processed.push(documentationCommentFor(methodDeclaration));
      }
      processed.push(processedLine);
    }
    processed = processed.join("\n");
    return console.log(processed);
  };

  documentationCommentFor = function(methodDeclaration) {
    var comment, i, line, matchedParams, methodParams, param, params, regex_param, regex_returnType, returnType, selector, _i, _j, _len, _len1, _ref;
    regex_returnType = /[-+]\s*\(\s*([a-zA-Z0-9_]+)\s*(\**)?\)\s*/;
    regex_param = /([a-zA-Z0-9]+)\s*((:)\s*\(\s*([a-zA-Z0-9<>]+)\s*(\*?)\s*\)\s*([a-zA-Z0-9]+)\s*)?/g;
    methodDeclaration = methodDeclaration.replace(/\n/, "");
    returnType = methodDeclaration.slice(methodDeclaration.indexOf("(") + 1, methodDeclaration.indexOf(")")).replace(" ", "");
    methodParams = methodDeclaration.slice(methodDeclaration.indexOf(")") + 1);
    selector = methodParams.replace(regex_param, "$1$3");
    params = [];
    matchedParams = methodParams.match(regex_param);
    if ((matchedParams != null ? matchedParams.length : void 0) > 0 && (matchedParams != null ? (_ref = matchedParams[0]) != null ? typeof _ref.indexOf === "function" ? _ref.indexOf(":") : void 0 : void 0 : void 0) !== -1) {
      params = methodParams.replace(regex_param, "@param {$4$5} $6\n").split("\n");
    }
    comment = [];
    comment.push("#### " + selector.trim());
    comment.push("");
    for (_i = 0, _len = params.length; _i < _len; _i++) {
      param = params[_i];
      comment.push(param.trim());
    }
    comment.push("@return {" + (returnType.trim()) + "}");
    for (i = _j = 0, _len1 = comment.length; _j < _len1; i = ++_j) {
      line = comment[i];
      comment[i] = " * " + line;
    }
    return "/**!\n" + comment.join("\n") + "\n */\n";
  };

}).call(this);
